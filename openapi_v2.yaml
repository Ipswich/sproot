openapi: "3.0.1"

info:
  title: "sproot"
  version: "0.0.1"
  description: >
    Sproot is a general purpose environmental management system with a focus on greenhouse and garden.
    The system is intended to be used to monitor and control various environmental parameters, to 
    continuously update and maintain "homeostasis". This API is a machine-friendly interface for 
    interacting with the system, and is designed to be used by a web-based front-end. This specification
    can be used to generate client libraries, documentation, and other tools.

paths:
  /api/v2/ping:
    get:
      tags:
        - "Ping"
      summary: Ping the server.
      description: >
        Returns a simple 'pong' response. Useful for checking if the server is running, or connectivity.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "pong"

  /api/v2/outputs/supported-models:
    get:
      tags:
        - "Outputs"
      summary: Get supported models.
      description: Returns a list of supported output models. 
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: string
                            example: 
                              - "PCA9685"

  /api/v2/sensors:
    get:
      tags:
        - "Sensors"
      summary: Get all sensors.
      description: > 
        Returns a list of all sensors. This includes basic information about each sensor, such as 
        name, model, and address. Also contains the last reading and time of the last reading.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/SensorBase"
    post:
      tags:
        - "Sensors"
      summary: Add a new sensor.
      description: >
        Adds a new sensor to the service, and regenerates the list of sensors. Returns the information
        used to create the sensor.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SDBSensor"
      responses:
        201:
          description: "Sensor created"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 201
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/SDBSensor"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/sensors"
                          details:
                            example:
                              - "Missing required field: name"
                              - "Missing required field: model"
                              - "Missing required field: address"
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/sensors"
                          details:
                            items:
                              example:
                                - "Failed to add sensor to database."
                                - "Database connection failed."

  /api/v2/sensors/{id}:
    get:
      tags:
        - "Sensors"
      summary: Get a sensor by id.
      description: >
        Returns data for the given sensor. This includes basic information, such as name, model, 
        and address. Also contains the last reading and time of the last reading.
      parameters:
        - in: path
          name: id
          required: true
          description: "Sensor Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/SensorBase"

        404:
          description: "Sensor not found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/sensors/-1"
                          details:
                            items:
                              example: "Sensor with Id -1 not found."
    patch:
      tags:
        - "Sensors"
      summary: Update a sensor by Id.
      description: >
        Updates a sensor with the given Id. This operation changes only the fields provided.
      parameters:
        - in: path
          name: id
          required: true
          description: "Sensor Id"
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Windowsill"
                model:
                  type: string
                  example: "BME280"
                address:
                  type: string
                  example: "0x76"
                color:
                  type: string
                  example: "#ff0000"
      responses:
        200:
          description: "Sensor updated"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/SDBSensor"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/sensors/string"
                          details:
                            example:
                              - Invalid sensor Id.
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/sensors/-1"
                          details:
                            items:
                              example: "Sensor with Id -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/sensors/1"
                          details:
                            items:
                              example:
                                - "Failed to update sensor in database."
                                - "Database connection failed."
    delete:
      tags:
        - "Sensors"
      summary: Delete a sensor by id.
      description: >
        Deletes a sensor with the given Id. This operation is permanent and cannot be undone.
      parameters:
        - in: path
          name: id
          required: true
          description: "Sensor Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Sensor deleted"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: 
                              "Sensor sucessfully deleted."
                    
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/sensors/string"
                          details:
                            example:
                              - Invalid sensor Id.
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/sensors/-1"
                          details:
                            items:
                              example: "Sensor with Id -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/sensors/1"
                          details:
                            items:
                              example:
                                - "Failed to delete sensor from database."
                                - "Database connection failed."

  # /api/v2/sensors/chart-data:
  #   get:
  #     tags:
  #       - "Sensors"
  #       - "Charts"
  #     summary: "Get chart data"
  #     description: "Returns chart data for all sensors."
  #     responses:
  #       200:
  #         description: "Success"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/SuccessResponse"

  /api/v2/sensors/supported-models:
    get:
      tags:
        - "Sensors"
      summary: Get supported models.
      description: Returns a list of supported sensor models. 
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: string
                            example: 
                              - "BME280"
                              - "DS18B20"

components:
  schemas:
    ApiResponse:
      description: >
        A generic response object that is returned by all API endpoints. Contains a status code, 
        timestamp, and a unique request Id.
      type: object
      required:
        - "statusCode"
        - "timestamp"
        - "requestId"
      properties:
        statusCode:
          type: integer
        timestamp:
          type: string
          example: "2021-01-01T00:00:00.000Z"
        requestId:
          type: string
          example: "9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d"

    SuccessResponse:
      description: >
        A generic success response object that is returned by all successful API endpoints. 
        Contains a status code, timestamp, a unique request Id, and, optionally, some content.
      allOf:
        - type: object
          properties:
            statusCode:
              type: integer
            content:
              type: object
              required:
                - "data"
              properties:
                data:
                  anyOf:
                    - $ref: "#/components/schemas/SupportedModels"
                    - type: array
                      items:
                        $ref: "#/components/schemas/SensorBase"
                    - type: string
                    - type: number
                    - type: integer
                    - type: boolean
                    - type: array
                    - type: object
                # moreDataAvailable:
                #   type: boolean
                #   example: false
        - $ref: "#/components/schemas/ApiResponse"

    ErrorResponse:
      description: >
        A generic error response object that is returned by all unsuccessful API endpoints. 
        Contains a status code, timestamp, a unique request Id, and an error object. This error
        object may contain the name of the error, and an array of details (if relevant).
      allOf:
        - type: object
          required:
            - "error"
          properties:
            statusCode:
              type: integer
            error:
              type: object
              properties:
                name:
                  type: string
                details:
                  type: array
        - $ref: "#/components/schemas/ApiResponse"
        
    SDBSensor:
      description: >
        A sensor object that is stored in the database. Contains all the information needed to 
        create a sensor, including name, model, address, and, optionally, color.
      type: object
      required:
        - "name"
        - "model"
        - "address"
      properties:
        name:
          type: string
          example: "Windowsill"
        model:
          type: string
          example: "DS18B20"
        address:
          type: string
          example: "28-00000"
        color:
          type: string
          example: "#ff0000"

    SensorBase:
      description: >
        A basic sensor object that is returned by the API. This expands upon SDBSensor, including the
        last reading, last reading time, and units.
      allOf:
        - $ref: "#/components/schemas/SDBSensor"
        - type: object
          required:
            - "id"
            - "name"
            - "model"
            - "address"
            - "lastReading"
            - "lastReadingTime"
            - "units"
          properties:
            id:
              type: number
              example: 1
            lastReading:
              type: object
              properties:
                temperature:
                  type: string
                  example: "23.5"
            lastReadingTime:
              type: string
              nullable: true
              example: "2021-01-01T00:00:00.000Z"
            units:
              type: object
              properties:
                temperature:
                  type: string
                  example: "C"

    SupportedModels:
      description: >
        A list of supported sensor models. This is a simple array of strings.
      type: array
      items:
        type: string
