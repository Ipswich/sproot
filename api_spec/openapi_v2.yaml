openapi: "3.0.1"

info:
  title: "sproot"
  version: "0.2.0"
  description: >
    Sproot is a general purpose environmental management system with a focus on greenhouse and garden.
    The system is intended to be used to monitor and control various environmental parameters, to 
    continuously update and maintain "homeostasis". This API is a machine-friendly interface for 
    interacting with the system, and is designed to be used by a web-based front-end. This specification
    can be used to generate client libraries, documentation, and other tools.

paths:
  /api/v2/authenticate/token:
    post:
      tags:
        - "Authentication"
      summary: Get an authentication token for authorization header.
      description: >
        Authenticates a user and returns a JWT token to be used as a Bearer Authorization header.
        This is intended to be used for API access.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "username"
                password:
                  type: string
                  example: "password"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: object
                            properties:
                              token:
                                type: string
                                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/authenticate/token"
                          details:
                            example:
                              - "Missing username"
                              - "Missing password"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/authenticate/token"
                          details:
                            items:
                              example: "Invalid username or password."
        501:
          description: "Not Implemented"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 501
                      error:
                        properties:
                          name:
                            example: "Not Implemented"
                          url:
                            example: "/api/v2/authenticate/token"
                          details:
                            example:
                              - "Authentication is not enabled."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/authenticate/token"
                          details:
                            items:
                              example:
                                - "Failed to get user from database."
                                - "Database connection failed."

  /api/v2/authenticate/login:
    post:
      tags:
        - "Authentication"
      summary: Get an authentication token set as a cookie.
      description: >
        Authenticates a user and sets a JWT token as an httponly cookie, and returns a csrf token in the response body.
        This is intended to be used for web-based front-ends. The csrf token should be included in the x-csrf-token header
        for all subsequent requests.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "username"
                password:
                  type: string
                  example: "password"
      responses:
        200:
          description: "Success"
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImRldi10ZXN0IiwiY3NyZiI6ImQ4N2MyZGZiLTkyMTUtNGM3Yy04Mzg2LWM4NGU3ODk0ZjRkZSIsImlhdCI6MTcyMDIzOTE1MywiZXhwIjoxOTc5NDM5MTUzfQ.Kp4jyZoBXdrw6dVnk8DPw4hmfWEtFfz0sZoWxBcGjUw; Max-Age=259200; Path=/; Expires=Mon, 01 Jan 2024 00:00:00 GMT; HttpOnly; SameSite=Strict
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: object
                            properties:
                              csrf-token:
                                type: string
                                example: "9a2eada2-4e6a-4a41-ae9e-fefaa2475175"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/authenticate/login"
                          details:
                            example:
                              - "Missing username"
                              - "Missing password"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/authenticate/login"
                          details:
                            items:
                              example: "Invalid username or password."
        501:
          description: "Not Implemented"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 501
                      error:
                        properties:
                          name:
                            example: "Not Implemented"
                          url:
                            example: "/api/v2/authenticate/login"
                          details:
                            example:
                              - "Authentication is not enabled."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/authenticate/login"
                          details:
                            items:
                              example:
                                - "Failed to get user from database."
                                - "Database connection failed."
  /api/v2/system/power-off:
    post:
      tags: 
        - "System"
      summary: "Power off the system."
      description: >
        Powers off the system. This operation is permanent and cannot be undone. Though, it 
        should come back if you haven't changed any docker settings. It's intent is more of a
        "restart" then a "power off".
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "System is powering off."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/power-off"
                          details:
                            items:
                              example:
                                - "Failed to power off system."
                                - "System is not available."
  /api/v2/ping:
    get:
      tags:
        - "Ping"
      summary: Ping the server.
      description: >
        Returns a simple 'pong' response. Useful for checking for connectivity to the server.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "pong"

  /api/v2/outputs:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: Get all outputs.
      description: >
        Returns a list of all outputs. This includes basic information about each output, such as 
        name, model, and address.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/OutputBase"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: Add a new output.
      description: >
        Adds a new output to the service, and regenerates the list of outputs. Returns the information
        used to create the output.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SDBOutput"
      responses:
        201:
          description: "Output created"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 201
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/SDBOutput"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/outputs"
                          details:
                            example:
                              - "Missing required field: model"
                              - "Missing required field: address"
                              - "Missing required field: name"
                              - "Missing required field: pin"
                              - "Missing required field: isPwm"
                              - "Missing required field: isInvertedPwm"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs"
                          details:
                            example: "Invalid or Missing JWT."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/outputs"
                          details:
                            items:
                              example:
                                - "Failed to add output to database."
                                - "Database connection failed."

  /api/v2/outputs/{outputId}:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: Get an output by Id.
      description: >
        Returns data for the given output. This includes basic information, such as name, model, 
        and address. Also contains the current state of the output.
      parameters:
        - in: path
          name: outputId
          required: true
          description: "Output Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/OutputBase"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/1"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        404:
          description: "Output not found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/outputs/-1"
                          details:
                            items:
                              example: "Output with ID -1 not found."
    patch:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: Update an output by Id.
      description: >
        Updates an output with the given ID. This operation changes only the fields provided.
      parameters:
        - in: path
          name: outputId
          required: true
          description: "Output Id"
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "PCA9685"
                model:
                  type: string
                  example: "PCA9685"
                address:
                  type: string
                  example: "0x40"
                pin:
                  type: string
                  example: "0"
                isPwm:
                  type: boolean
                  example: true
                isInvertedPwm:
                  type: boolean
                  example: false
                color:
                  type: string
                  example: "#ff0000"
      responses:
        200:
          description: "Output updated"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/SDBOutput"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/outputs/string"
                          details:
                            example:
                              - Invalid or missing output Id.
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/1"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/outputs/-1"
                          details:
                            items:
                              example: "Output with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/outputs/1"
                          details:
                            items:
                              example:
                                - "Failed to update output in database."
                                - "Database connection failed."
    delete:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: Delete an output by Id.
      description: >
        Deletes an output with the given ID. This operation is permanent and cannot be undone.
      parameters:
        - in: path
          name: outputId
          required: true
          description: "Output Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Output deleted"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "Output sucessfully deleted."
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/outputs/string"
                          details:
                            example:
                              - Invalid or missing output Id.
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/1"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/outputs/-1"
                          details:
                            items:
                              example: "Output with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/outputs/1"
                          details:
                            items:
                              example:
                                - "Failed to delete output from database."
                                - "Database connection failed."
  /api/v2/outputs/chart-data:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: "Get all chart data."
      parameters:
        - name: "latest"
          in: "query"
          description: "Return only the latest data point."
          schema:
            type: string
          example: "true"
      description: "Returns chart data for all ouputs."
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: "#/components/schemas/DataPoint"
                                example:
                                  - name: "1/24 12:00 am"
                                    output1: 0
                                    output2: 50
                                    units: "%"
                                  - name: "1/24 12:05 am"
                                    output1: 0
                                    output2: 50
                                    units: "%"
                              series:
                                type: array
                                items:
                                  $ref: "#/components/schemas/ChartSeries"
                                example:
                                  - name: "output1"
                                    color: "lime"
                                  - name: "output2"
                                    color: "blue"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/chart-data"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
  /api/v2/outputs/supported-models:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: Get supported models.
      description: Returns a list of supported output models.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            allOf:
                              - $ref: "#/components/schemas/SupportedModels"
                            example:
                              object:
                                PCA9685: "PCA9685"
                                TPLinkSmartPlug: "TPLink Smart Plug"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/supported-models"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
  /api/v2/outputs/available-devices/{model}:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Outputs"
      summary: Gets gets available devices for a given output model.
      description: >
        Gets available devices for a given model. Optionally, filter by address. Useful for getting
        devices you could create an output with.
      parameters:
        - in: path
          name: model
          required: true
          description: "Output model"
          schema:
            type: string
          example: "TPLINK_SMART_PLUG"
        - in: query
          name: address
          required: false
          description: Output address
          schema:
            type: string
          example: "192.168.2.138"
        - in: query
          name: filterUsed
          required: false
          description: Output address
          schema:
            type: boolean
          example: false
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            allOf:
                              - $ref: "#/components/schemas/AvailableDevices"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/outputs/available-devices"
                          details:
                            example:
                              - Model s300 not recognized.
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/available-devices"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
  /api/v2/outputs/{outputId}/control-mode:
    put:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Output State"
      summary: Set control mode for an output.
      description: >
        Sets the control mode for the output with the given ID. This operation changes the control mode
        for the output.
      parameters:
        - in: path
          name: outputId
          required: true
          description: "Output Id"
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                controlMode:
                  type: string
                  example: "manual"
      responses:
        200:
          description: "Control mode set"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example:
                              - "Control mode successfully updated."
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/outputs/string/control-mode"
                          details:
                            example:
                              - Invalid or missing output Id.
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/1/control-mode"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/outputs/-1/control-mode"
                          details:
                            items:
                              example: "Output with ID -1 not found."

  /api/v2/outputs/{outputId}/manual-state:
    put:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Output State"
      summary: Set manual state for an output.
      description: >
        Sets the manual state for the output with the given ID.
      parameters:
        - in: path
          name: outputId
          required: true
          description: "Output Id"
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: number
                  example: 50
      responses:
        200:
          description: "Manual state set"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example:
                              - "Manual state successfully updated."
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/outputs/string/manual-state"
                          details:
                            example:
                              - Invalid or missing output Id.
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/outputs/1/manual-state"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/outputs/-1/manual-state"
                          details:
                            items:
                              example: "Output with ID -1 not found."

  /api/v2/automations:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automations"
      summary: Get all automations.
      description: >
        Returns a list of all automations. This includes basic information about each automation, such as the name,
        the operator, and the conditions for each automation.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/Automation"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations"
                          details:
                            items:
                              example:
                                - "Failed to retrieve automations from database."
                                - "Database connection failed."
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automations"
      summary: Add a new automation.
      description: >
        Adds a new automation to the service, and regenerates the list of automations. Returns the information
        used to create the automation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Automation"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 201
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/Automation"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/automations"
                          details:
                            example:
                              - "Invalid name"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations"
                          details:
                            items:
                              example:
                                - "Failed to add automation to database."
                                - "Database connection failed."
    
  /api/v2/automations/{automationId}:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automations"
      summary: Get an automation by Id.
      description: >
        Returns the automation with the given ID. This includes the name, the operator, and the conditions for the automation.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/Automation"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/-1"
                          details:
                            items:
                              example: "Automation with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1"
                          details:
                            items:
                              example:
                                - "Failed to retrieve automation from database."
                                - "Database connection failed."
    delete: 
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automations"
      summary: Delete an automation by Id.
      description: >
        Deletes an automation with the given ID. This operation is permanent and cannot be undone.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "Automation sucessfully deleted."
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/automations/1"
                          details:
                            example:
                              - "Invalid or missing automation Id."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url: 
                            example: "/api/v2/automations/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/-1"
                          details:
                            items:
                              example: "Automation with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1"
                          details:
                            items:
                              example:
                                - "Failed to delete automation from database."
                                - "Database connection failed."
    patch:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automations"
      summary: Update an automation by Id.
      description: >
        Updates an automation with the given ID.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Automation"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/Automation"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/automations/1"
                          details:
                            example:
                              - "Invalid or missing automation Id."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/-1"
                          details:
                            items:
                              example: "Automation with Id -1 not found."
        503:
          description: "Service unavailable"
          content: 
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1"
                          details:
                            items:
                              example:
                                - "Failed to update automation in database."
                                - "Database connection failed."
  /api/v2/automations/{automationId}/conditions:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automation Conditions"
      summary: Get all conditions for an automation.
      description: >
        Returns a list of all conditions for the given automation. This includes basic information about each condition,
        such as the type, the operator, and the value.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            anyOf:
                              - $ref: "#/components/schemas/AutomationConditions"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1/conditions"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/1/conditions"
                          details:
                            items:
                              example: "Automation with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1/conditions"
                          details:
                            items:
                              example:
                                - "Failed to get conditions from database."
                                - "Database connection failed."
  /api/v2/automations/{automationId}/conditions/{type}:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automation Conditions"
      summary: Get all conditions for an automation.
      description: >
        Returns a list of all conditions for the given automation. This includes basic information about each condition,
        such as the type, the operator, and the value.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
        - in: path
          name: type
          required: true
          description: "Condition Type"
          schema:
            type: string
            enum:
              - "sensor"
              - "output"
              - "time"
              - "weekday"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              anyOf:
                                - $ref: "#/components/schemas/SensorCondition"
                                - $ref: "#/components/schemas/OutputCondition"
                                - $ref: "#/components/schemas/TimeCondition"
                                - $ref: "#/components/schemas/WeekdayCondition"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor"
                          details:
                            example:
                              - "Invalid or missing automation Id."
                              - "Invalid or missing condition type."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor"
                          details:
                            items:
                              example: "Automation with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor"
                          details:
                            items:
                              example:
                                - "Failed to get conditions from database."
                                - "Database connection failed."
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automation Conditions"
      summary: Add a new condition to an automation.
      description: >
        Adds a new condition to the given automation. Returns the information used to create the condition.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
        - in: path
          name: type
          required: true
          description: "Condition Type"
          schema:
            type: string
            enum:
              - "sensor"
              - "output"
              - "time"
              - "weekday"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: "#/components/schemas/SensorCondition"
                - $ref: "#/components/schemas/OutputCondition"
                - $ref: "#/components/schemas/TimeCondition"
                - $ref: "#/components/schemas/WeekdayCondition"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 201
                      content:
                        properties:
                          data:
                            anyOf:
                              - $ref: "#/components/schemas/SensorCondition"
                              - $ref: "#/components/schemas/OutputCondition"
                              - $ref: "#/components/schemas/TimeCondition"
                              - $ref: "#/components/schemas/WeekdayCondition"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor"
                          details:
                            example:
                              - "Invalid or missing automation Id."
                              - "Invalid or missing condition type."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/-1/conditions/sensor"
                          details:
                            items:
                              example: "Automation with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor"
                          details:
                            items:
                              example:
                                - "Failed to add condition to database."
                                - "Database connection failed."
  /api/v2/automations/{automationId}/conditions/{type}/{conditionId}:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automation Conditions"
      summary: Get a condition by Id.
      description: >
        Returns the condition with the given ID. This includes the type, the operator, and the value of the condition.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
        - in: path
          name: type
          required: true
          description: "Condition Type"
          schema:
            type: string
            enum:
              - "sensor"
              - "output"
              - "time"
              - "weekday"
        - in: path
          name: conditionId
          required: true
          description: "Condition Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            anyOf:
                              - $ref: "#/components/schemas/SensorCondition"
                              - $ref: "#/components/schemas/OutputCondition"
                              - $ref: "#/components/schemas/TimeCondition"
                              - $ref: "#/components/schemas/WeekdayCondition"

        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/-1"
                          details:
                            items:
                              example: "Condition with ID #-1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            items:
                              example:
                                - "Failed to get condition from database."
                                - "Database connection failed."
    patch:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automation Conditions"
      summary: Update a condition by Id.
      description: >
        Updates a condition with the given ID.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
        - in: path
          name: type
          required: true
          description: "Condition Type"
          schema:
            type: string
            enum:
              - "sensor"
              - "output"
              - "time"
              - "weekday"
        - in: path
          name: conditionId
          required: true
          description: "Condition Id"
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: "#/components/schemas/SensorCondition"
                - $ref: "#/components/schemas/OutputCondition"
                - $ref: "#/components/schemas/TimeCondition"
                - $ref: "#/components/schemas/WeekdayCondition"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            anyOf:
                              - $ref: "#/components/schemas/SensorCondition"
                              - $ref: "#/components/schemas/OutputCondition"
                              - $ref: "#/components/schemas/TimeCondition"
                              - $ref: "#/components/schemas/WeekdayCondition"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            example:
                              - "Invalid or missing automation Id."
                              - "Invalid or missing condition type."
                              - "Invalid or missing condition Id."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/-1"
                          details:
                            items:
                              example: "Condition with ID #-1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            items:
                              example:
                                - "Failed to update condition in database."
                                - "Database connection failed."
    delete:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Automation Conditions"
      summary: Delete a condition by Id.
      description: >
        Deletes a condition with the given ID. This operation is permanent and cannot be undone.
      parameters:
        - in: path
          name: automationId
          required: true
          description: "Automation Id"
          schema:
            type: string
          example: "1"
        - in: path
          name: type
          required: true
          description: "Condition Type"
          schema:
            type: string
            enum:
              - "sensor"
              - "output"
              - "time"
              - "weekday"
        - in: path
          name: conditionId
          required: true
          description: "Condition Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "Condition sucessfully deleted."
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            example:
                              - "Invalid or missing automation Id."
                              - "Invalid or missing condition type."
                              - "Invalid or missing condition Id."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/-1"
                          details:
                            items:
                              example: "Condition with ID #-1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/automations/1/conditions/sensor/1"
                          details:
                            items:
                              example:
                                - "Failed to delete condition from database."
                                - "Database connection failed."

  /api/v2/output-actions:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Output Actions"
      summary: Get output actions.
      parameters:
        - in: query
          name: automationId
          required: false
          description: "Automation Id"
          schema:
            type: string
          example: "1"
      description: >
        Returns a list of output actions. This includes basic information about each action, 
        such as the Id, the output Id, and the value that will be set when the linked automation is triggered.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/OutputAction"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/output-actions"
                          details:
                            example: "Invalid or Missing JWT."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/output-actions"
                          details:
                            items:
                              example:
                                - "Failed to get output actions from database."
                                - "Database connection failed."
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Output Actions"
      summary: Create a new output based action.
      description: >
        Creates a new output action. This will effect a change in the output when the linked automation triggers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OutputAction"
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 201
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/OutputAction"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/actions/"
                          details:
                            example:
                              - "Invalid or missing automation Id."
                              - "Invalid or missing output value."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/output-actions"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/output-automations"
                          details:
                            items:
                              example: "Automation with Id -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/output-actions"
                          details:
                            items:
                              example:
                                - "Failed to create output action."
                                - "Database connection failed."

  /api/v2/output-actions/{outputActionId}:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Output Actions"
      summary: Get an output action by Id.
      description: >
        Returns the output action with the given Id. This includes the Id, the output Id, and the value that will be set when the linked automation is triggered.
      parameters:
        - in: path
          name: outputActionId
          required: true
          description: "Output Action Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/OutputAction"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/output-actions/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/output-actions/-1"
                          details:
                            items:
                              example: "Output action with Id -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/output-actions/1"
                          details:
                            items:
                              example:
                                - "Failed to get output action from database."
                                - "Database connection failed."
   
    delete:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Output Actions"
      summary: Delete an output action by Id.
      description: >
        Deletes an output action with the given Id. This operation is permanent and cannot be undone.
      parameters:
        - in: path
          name: outputActionId
          required: true
          description: "Output Action Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "Output action successfully deleted."
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/output-actions/1"
                          details:
                            example:
                              - "Invalid or missing output action Id."
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/output-actions/1"
                          details:
                            example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/output-actions/-1"
                          details:
                            items:
                              example: "Output action with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/output-actions/1"
                          details:
                            items:
                              example:
                                - "Failed to delete output action from database."
                                - "Database connection failed."

  

  /api/v2/sensors:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: Get all sensors.
      description: >
        Returns a list of all sensors. This includes basic information about each sensor, such as 
        name, model, and address. Also contains the last reading and time of the last reading.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/SensorBase"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: Add a new sensor.
      description: >
        Adds a new sensor to the service, and regenerates the list of sensors. Returns the information
        used to create the sensor.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SDBSensor"
      responses:
        201:
          description: "Sensor created"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 201
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/SDBSensor"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/sensors"
                          details:
                            example:
                              - "Missing required field: name"
                              - "Missing required field: model"
                              - "Missing required field: address"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/sensors"
                          details:
                            items:
                              example:
                                - "Failed to add sensor to database."
                                - "Database connection failed."

  /api/v2/sensors/{sensorId}:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: Get a sensor by Id.
      description: >
        Returns data for the given sensor. This includes basic information, such as name, model, 
        and address. Also contains the last reading and time of the last reading.
      parameters:
        - in: path
          name: sensorId
          required: true
          description: "sensor Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            items:
                              $ref: "#/components/schemas/SensorBase"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors/1"
                          details:
                            items:
                              example: "Invalid or Missing JWT."

        404:
          description: "Sensor not found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/sensors/-1"
                          details:
                            items:
                              example: "Sensor with ID -1 not found."
    patch:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: Update a sensor by Id.
      description: >
        Updates a sensor with the given ID. This operation changes only the fields provided.
      parameters:
        - in: path
          name: sensorId
          required: true
          description: "sensor Id"
          schema:
            type: string
          example: "1"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Windowsill"
                model:
                  type: string
                  example: "BME280"
                address:
                  type: string
                  example: "0x76"
                color:
                  type: string
                  example: "#ff0000"
      responses:
        200:
          description: "Sensor updated"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/SDBSensor"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/sensors/string"
                          details:
                            example:
                              - Invalid or missing sensor Id.
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors/1"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/sensors/-1"
                          details:
                            items:
                              example: "Sensor with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/sensors/1"
                          details:
                            items:
                              example:
                                - "Failed to update sensor in database."
                                - "Database connection failed."
    delete:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: Delete a sensor by Id.
      description: >
        Deletes a sensor with the given ID. This operation is permanent and cannot be undone.
      parameters:
        - in: path
          name: sensorId
          required: true
          description: "sensor Id"
          schema:
            type: string
          example: "1"
      responses:
        200:
          description: "Sensor deleted"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "Sensor sucessfully deleted."

        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/sensors/string"
                          details:
                            example:
                              - Invalid or missing sensor Id.
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors/1"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        404:
          description: "Not Found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/sensors/-1"
                          details:
                            items:
                              example: "Sensor with ID -1 not found."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service Unavailable"
                          url:
                            example: "/api/v2/sensors/1"
                          details:
                            items:
                              example:
                                - "Failed to delete sensor from database."
                                - "Database connection failed."

  /api/v2/sensors/chart-data:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: "Get all chart data."
      description: "Returns chart data for all sensors."
      parameters:
        - in: query
          name: readingType
          description: "Reading type"
          schema:
            type: string
          example: "temperature"
        - name: "latest"
          in: "query"
          description: "Return only the latest data point."
          schema:
            type: string
          example: "true"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: object
                            properties:
                              temperature:
                                type: array
                                items:
                                  $ref: "#/components/schemas/DataPoint"
                                example:
                                  - name: "1/24 12:00 am"
                                    sensor1: 25.000
                                    sensor2: 25.000
                                    units: "°C"
                                  - name: "1/24 12:05 am"
                                    sensor1: 25.625
                                    sensor2: 25.625
                                    units: "°C"
                              humidity:
                                type: array
                                items:
                                  $ref: "#/components/schemas/DataPoint"
                                example:
                                  - name: "1/24 12:00 am"
                                    sensor1: 50.000
                                    sensor2: 50.000
                                    units: "%rH"
                                  - name: "1/24 12:05 am"
                                    sensor1: 50.625
                                    sensor2: 50.625
                                    units: "%rH"
                          series:
                            type: array
                            items:
                              $ref: "#/components/schemas/ChartSeries"
                            example:
                              - name: "sensor1"
                                color: "lime"
                              - name: "sensor2"
                                color: "blue"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors/chart-data"
                          details:
                            items:
                              example: "Invalid or Missing JWT."

  /api/v2/sensors/supported-models:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: Get supported models.
      description: Returns a list of supported sensor models.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            allOf:
                              - $ref: "#/components/schemas/SupportedModels"
                            example:
                              object:
                                DS18B20: "DS18B20"
                                BME280: "BME280"
                                ADS1115: "ADS1115"
                                CAPACITIVE_MOISTURE_SENSOR: "Capacitive Moisture Sensor"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors/supported-models"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
  
  /api/v2/sensors/reading-types:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Sensors"
      summary: Get active reading types and their units.
      description: >
        Returns a list of active sensor reading types and their units. These are the ones currently 
        in use by the system.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: object
                            allOf:
                              - $ref: "#/components/schemas/ReadingTypes"
                            properties:
                              temperature: 
                                type: string
                              humidity:
                                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/sensors/reading-types"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
  /api/v2/camera/settings:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Get camera settings.
      description: Returns the current camera settings.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/CameraSettings"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/camera/settings"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
    patch:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Update camera settings.
      description: >
        Updates the camera settings. This operation changes only the fields provided.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CameraSettings"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            $ref: "#/components/schemas/CameraSettings"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 400
                      error:
                        properties:
                          name:
                            example: "Bad Request"
                          url:
                            example: "/api/v2/camera/settings"
                          details:
                            items:
                              example: 
                                - "Missing timelapse enabled"
                                - "Missing timelapse image retention days"
                                - "Missing timelapse image retention size"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 401
                      error:
                        properties:
                          name:
                            example: "Unauthorized"
                          url:
                            example: "/api/v2/camera/settings"
                          details:
                            items:
                              example: "Invalid or Missing JWT."
        503:
          description: "Service unavailable"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 503
                      error:
                        properties:
                          name:
                            example: "Service unavailable"
                          url:
                            example: "/api/v2/camera/settings"
                          details:
                            items:
                              example: "Failed to update camera settings: database connection failed."
  /api/v2/camera/stream:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Get a live MJPEG camera stream.
      description: Returns a live MJPEG stream from the camera.
      responses:
        200:
          description: "Success"
          content:
            multipart/x-mixed-replace:
              schema:
                type: string
                format: binary
        502:
          description: "Bad Gateway"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 502
                      error:
                        properties:
                          name:
                            example: "Bad Gateway"
                          url:
                            example: "/api/v2/camera/stream"
                          details:
                            items:
                              example: "Failed to connect to camera stream"
  /api/v2/camera/reconnect:
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Reconnect to the camera.
      description: >
        Attempts to reconnect to the camera. This is useful if the camera has lost connection or 
        is not responding.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            example: "Livestream successfully reconnected"
        502:
          description: "Internal server error"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 502
                      error:
                        properties:
                          name:
                            example: "Internal Server Error"
                          url:
                            example: "/api/v2/camera/reconnect"
                          details:
                            items:
                              example: "Could not connect to camera server"
  /api/v2/camera/latest-image:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Get the latest image.
      description: Returns the most recently taken image.
      responses:
        200:
          description: "Success"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        404:
          description: "Image not found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/camera/latest-image"
                          details:
                            items:
                              example: "No latest image"
  /api/v2/camera/timelapse/archive:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Get the timelapse archive.
      description: Returns a tar file containing all timelapse images.
      responses:
        200:
          description: "Success"
          headers:
            Content-Length:
              description: "The size of the content in bytes."
              schema:
                type: string
                example: "12345678"
            Content-Disposition:
              description: "Indicates that the content is a file attachment."
              schema:
                type: string
                example: "attachment; filename=\"timelapse.tar\""
          content:
            application/x-tar:
              schema:
                type: string
                format: binary
        404:
          description: "Archive not found"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 404
                      error:
                        properties:
                          name:
                            example: "Not Found"
                          url:
                            example: "/api/v2/camera/timelapse/archive"
                          details:
                            items:
                              example: "No timelapse archive available."
        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - properties:
                      statusCode:
                        example: 500
                      error:
                        properties:
                          name:
                            example: "Internal Server Error"
                          url:
                            example: "/api/v2/camera/timelapse/archive"
                          details:
                            items:
                              example: "Error streaming timelapse archive."

  /api/v2/camera/timelapse/archive/regenerate:
    post:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Regenerate the timelapse archive.
      description: >
        Regenerates the timelapse archive. Useful if you want to regenerate it to now, instead of waiting for the usual interval.
      responses:
        202:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 202
                      content:
                        properties:
                          data:
                            example: "Timelapse archive regeneration queued."        
  /api/v2/camera/timelapse/archive/status:
    get:
      security:
        - bearerAuth: []
        - cookieAuth: []
      tags:
        - "Camera"
      summary: Get the status of the timelapse archive regeneration.
      description: >
        Returns the status of the timelapse archive regeneration. This is useful to check if the regeneration is still in progress.
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - properties:
                      statusCode:
                        example: 200
                      content:
                        properties:
                          data:
                            type: object
                            properties:
                              isGenerating:
                                type: boolean
                                example: "true"
                              archiveProgress:
                                type: number
                                example: 75        

components:
  schemas:
    ApiResponse:
      description: >
        A generic response object that is returned by all API endpoints. Contains a status code, 
        timestamp, and a unique request Id.
      type: object
      required:
        - "statusCode"
        - "timestamp"
        - "requestId"
      properties:
        statusCode:
          type: integer
        timestamp:
          type: string
          example: "2021-01-01T00:00:00.000Z"
        requestId:
          type: string
          example: "9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d"

    SuccessResponse:
      description: >
        A success response object that is returned by all successful API requests. 
        Contains a status code, timestamp, a unique request Id, and, optionally, some content.
      allOf:
        - type: object
          properties:
            statusCode:
              type: integer
            content:
              type: object
              required:
                - "data"
        - $ref: "#/components/schemas/ApiResponse"

    ErrorResponse:
      description: >
        An error response object that is returned by all unsuccessful API requests. 
        Contains a status code, timestamp, a unique request Id, and an error object. This error
        object may contain the name of the error, and an array of details (if relevant).
      allOf:
        - type: object
          required:
            - "error"
          properties:
            statusCode:
              type: integer
            error:
              type: object
              properties:
                request:
                  type: object
                  properties:
                    method:
                      type: string
                    url:
                      type: string
                    body:
                      type: object
                    query:
                      type: object
                name:
                  type: string
                url:
                  type: string
                details:
                  type: array
        - $ref: "#/components/schemas/ApiResponse"

    SDBOutput:
      description: >
        An output object that is stored in the database. Contains all the information needed to 
        create an output, including model, address, name, pin, if the output is a pwm, whether that
        pwm value is should be inverted, color, and the automation timeout.
      type: object
      required:
        - "model"
        - "address"
        - "pin"
        - "isPwm"
        - "isInvertedPwm"
        - "color"
        - "automationTimeout"
      properties:
        model:
          type: string
          example: "PCA9685"
        address:
          type: string
          example: "0x40"
        name:
          type: string
          example: "PCA9685"
        pin:
          type: string
          example: "0"
        isPwm:
          type: boolean
          example: true
        isInvertedPwm:
          type: boolean
          example: false
        color:
          type: string
          example: "#ff0000"
        automationTimeout:
          type: number
          example: 60

    OutputBase:
      description: >
        A basic output object that is returned by the API. This expands upon SDBOutput, including the
        ID and state of the output. This maps to what the app keeps in memory.
      allOf:
        - $ref: "#/components/schemas/SDBOutput"
        - type: object
          required:
            - "id"
            - "name"
            - "model"
            - "address"
            - "state"
          properties:
            id:
              type: number
              example: 1
            state:
              type: object
              properties:
                controlMode:
                  type: string
                  example: "manual"
                manual:
                  allOf:
                    - $ref: "#/components/schemas/SDBOutputState"
                automatic:
                  allOf:
                    - $ref: "#/components/schemas/SDBOutputState"

    SDBOutputState:
      description: >
        An output state object that is stored in the database. Contains all the information needed to 
        define an output's state, including control mode, value, and log time.
      type: object
      required:
        - value
        - logTime
      properties:
        controlMode:
          type: string
          example: "manual"
        value:
          type: number
          example: 50
        logTime:
          type: string
          example: "2021-01-01T00:00:00.000Z"

    Automation:
      description: >
        A generic automation object stored in the database. This is the base object that all automations
        are built from. Contains a just a name and an ID.
      type: object
      required:
        - "name"
      properties:
        id:
          readOnly: true
          type: number
          example: 1
        name:
          type: string
          example: "Turn on light"
        operator:
          type: string
          example: "or"
        # conditions:
        #   readOnly: true
        #   allOf:
        #     - $ref: "#/components/schemas/AutomationConditions"

    OutputAction:
      description: >
        An action object that is stored in the database. Contains the information needed to
        create an output action based on an existing automation.
      type: object
      required:
        - "automationId"
        - "value"
      properties:
        id:
          readOnly: true
          type: number
          example: 1
        automationId:
          type: number
          example: 1
        outputId:
          type: number
          example: 1
        value:
          type: number
          example: 50
    
    AutomationConditions:
      description: >
        These conditions define when an automation will run.
      readOnly: true
      properties:
        sensor:
          type: object
          properties:
            allOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
            anyOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
            oneOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
        output:
          type: object
          properties:
            allOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
            anyOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
            oneOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
        time:
          type: object
          properties:
            allOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
            anyOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
            oneOf:
              items:
                anyOf:
                  - $ref: "#/components/schemas/SensorCondition"
                  - $ref: "#/components/schemas/OutputCondition"
                  - $ref: "#/components/schemas/TimeCondition"
                  - $ref: "#/components/schemas/WeekdayCondition"
      
    SensorCondition:
      description: >
        Defines a condition based on a sensor value. 
      allOf:
        - type: object
          required:
            - operator
            - comparisonValue
            - sensorId
            - readingType
        - properties:
            id:
              type: number
              readOnly: true
              example: 1
            groupType: 
              type: string
              enum:
                - allOf
                - anyOf
                - oneOf
            operator:
              type: string
              example: "greaterOrEqual"
            comparisonValue:
              type: number
              example: 50
            sensorId:
              type: number
              example: 1
            sensorName:
              readOnly: true
              type: string
              example: "Windowsill"
            readingType:
              type: string
              example: "temperature"

    OutputCondition:
      description: >
        Defines a condition based on an output value.
      allOf:
      - type: object
        required:
          - operator
          - comparisonValue
          - outputId
      - properties:
          id:
            type: number
            readOnly: true
            example: 1
          groupType: 
            type: string
            enum:
              - allOf
              - anyOf
              - oneOf
          operator:
            type: string
            example: "greaterOrEqual"
          comparisonValue:
            type: number
            example: 50
          outputId:
            type: number
            example: 1
          outputName:
            readOnly: true
            type: string
            example: "Relay #1"
      
    TimeCondition:
      description: >
        Defines a condition based on time.
      allOf:
      - type: object
      - properties:
          id:
            type: number
            readOnly: true
            example: 1
          groupType: 
            type: string
            enum:
              - allOf
              - anyOf
              - oneOf
          startTime:
            nullable: true
            type: string
            example: "12:00"
          endTime:
            nullable: true
            type: string
            example: "18:00"

    WeekdayCondition:
      description: >
        Defines a condition based on the days of the week.
      allOf:
      - type: object
      - properties:
          id:
            type: number
            readOnly: true
            example: 1
          groupType: 
            type: string
            enum:
              - allOf
              - anyOf
              - oneOf
          weekdays:
            description: "A decimal conversion of a bitmask representing the days of the week: Sunday = 1, Monday = 2, Tuesday = 4, etc."
            type: number
            example: 127

    SDBSensor:
      description: >
        A sensor object that is stored in the database. Contains all the information needed to 
        create a sensor, including name, model, address, and, color.
      type: object
      required:
        - "name"
        - "model"
        - "address"
        - "color"
      properties:
        name:
          type: string
          example: "Windowsill"
        model:
          type: string
          example: "DS18B20"
        address:
          type: string
          example: "28-00000"
        color:
          type: string
          example: "#ff0000"
        pin:
          nullable: true
          type: string
          example: "0"
        lowCalibrationPoint:
          nullable: true
          type: number
          example: 0
        highCalibrationPoint:
          nullable: true
          type: number
          example: 100

    SensorBase:
      description: >
        A basic sensor object that is returned by the API. This expands upon SDBSensor, including the
        last reading, last reading time, and units. This maps to what the app keeps in memory.
      allOf:
        - $ref: "#/components/schemas/SDBSensor"
        - type: object
          required:
            - "id"
            - "name"
            - "color"
            - "model"
            - "address"
            - "lastReading"
            - "lastReadingTime"
            - "units"
          properties:
            id:
              type: number
              example: 1
            lastReading:
              type: object
              properties:
                temperature:
                  type: string
                  example: "23.5"
            lastReadingTime:
              type: string
              format: date-time
              nullable: true
              example: "2021-01-01T00:00:00.000Z"
            units:
              type: object
              properties:
                temperature:
                  type: string
                  example: "C"

    SupportedModels:
      description: >
        A Record of supported device models, mapped to a presentable label.
      type: object
      properties:
        type:
          type: string

    AvailableDevices:
      description: >
        A list of available devices
      type: array
      items:
        type: object
        properties:
          alias:
            type: string
            example: Plug 1
          externalId:
            type: string
            example: 8006C5CA540AABD8165111F62C70CFD3236B0B3703
          address:
            type: string
            example: 192.168.2.138

    ReadingTypes:
      description: >
        An obejct of active sensor reading types and their units.
      type: object

    DataPoint:
      description: >
        A data point for recharts.
      type: object
      required:
        - "name"
      properties:
        name:
          type: string
        units:
          type: string

    ChartSeries:
      description: >
        An object containing both a name and a color. Used to add flair to a line on a chart.
      type: object
      required:
        - "name"
        - "color"
      properties:
        name:
          type: string
        color:
          type: string

    CameraSettings:
      description: >
        An object containing the current camera settings.
      type: object
      required:
        - "enabled"
        - "name"
        - "xVideoResolution"
        - "yVideoResolution"
        - "videoFps"
        - "xImageResolution"
        - "yImageResolution"
        - "timelapseEnabled"
        - "imageRetentionDays"
        - "imageRetentionSize"
        - "timelapseInterval"
        - "timelapseStartTime"
        - "timelapseEndTime"
      properties:
        id:
          type: number
          example: 1
        enabled:
          type: boolean
          example: true
        name:
          type: string
          example: "Camera 1"
        xVideoResolution:
          nullable: true
          type: number
          example: 1920
        yVideoResolution:
          nullable: true
          type: number
          example: 1080
        videoFps:
          nullable: true
          type: number
          example: 30
        xImageResolution:
          nullable: true
          type: number
          example: 1920
        yImageResolution:
          nullable: true
          type: number
          example: 1080
        timelapseEnabled:
          type: boolean
          example: true
        imageRetentionDays:
          type: number
          example: 30
        imageRetentionSize:
          type: number
          example: 1000
        timelapseInterval:
          nullable: true
          type: number
          example: 60
        timelapseStartTime:
          nullable: true
          type: string
          example: "00:00"
        timelapseEndTime:
          nullable: true
          type: string
          example: "23:59"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt_token
