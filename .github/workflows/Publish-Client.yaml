name: Publish Client Image

on:
  push:
    branches: ['main']
    paths:
      - 'common/src/**'
      - 'client/src/**'

env:
  REGISTRY: ghcr.io
  DOCKER_BUILD_RECORD_UPLOAD: false
  SERVICE: client

jobs:
  build-and-push-image:
    name: Build and Push Client Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ env.SERVICE }}
          tags: latest

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6.9.0
        with:
          context: ./
          build-args: |
            VITE_API_SERVER_URL=
            VITE_PRECONFIGURED=false
          file: ./${{ env.SERVICE }}/Dockerfile
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1.4.4
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}-${{ env.SERVICE }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true